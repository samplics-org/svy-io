name: Build and Publish Wheels
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*" # Only run release on version tags
  pull_request:
  workflow_dispatch:

jobs:
  build-wheels:
    name: Wheels (${{ matrix.os }} / Py ${{ matrix.python-version }}${{ matrix.target && format(' / {0}', matrix.target) || '' }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # --- Linux x86_64 ---
          - os: ubuntu-22.04
            python-version: "3.11"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            python-version: "3.12"
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04
            python-version: "3.13"
            target: x86_64-unknown-linux-gnu

          # --- Linux aarch64 ---
          - os: ubuntu-22.04
            python-version: "3.11"
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-22.04
            python-version: "3.12"
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-22.04
            python-version: "3.13"
            target: aarch64-unknown-linux-gnu

          # --- macOS (Apple Silicon) ---
          - os: macos-latest
            python-version: "3.11"
          - os: macos-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.13"

          # --- Windows (build once on 3.11 for abi3) ---
          - os: windows-latest
            python-version: "3.11"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # QEMU only needed when running the manylinux aarch64 container on x86_64 host
      - name: Set up QEMU (for aarch64 wheels)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # ----- libclang for bindgen -----
      - name: Install LLVM (macOS)
        if: runner.os == 'macOS'
        run: brew install llvm

      - name: Export LLVM env (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: choco install -y llvm

      # Ensure python3.lib exists for the MSVC linker (abi3)
      - name: Ensure python3.lib (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $libDir = Join-Path $env:pythonLocation "libs"
          Write-Host "Python libs: $libDir"
          $candidates = @("python311.lib","python312.lib","python313.lib")
          $target = Join-Path $libDir "python3.lib"
          if (-not (Test-Path $target)) {
            foreach ($c in $candidates) {
              $src = Join-Path $libDir $c
              if (Test-Path $src) { Copy-Item $src $target; break }
            }
          }
          if (-not (Test-Path $target)) { Write-Error "python3.lib not found or created." }

      - name: Clean dist directory
        shell: bash
        run: rm -rf dist && mkdir -p dist

      # Build wheels
      - name: Build wheels (maturin)
        uses: PyO3/maturin-action@v1
        env:
          # Speedup for *nix when using abi3
          PYO3_NO_PYTHON: ${{ runner.os != 'Windows' && '1' || '' }}
          # MSVC linker search path for Python import libs
          LIB: ${{ runner.os == 'Windows' && format('{0}\libs', env.pythonLocation) || '' }}
          # Set LIBCLANG_PATH for Windows
          LIBCLANG_PATH: ${{ runner.os == 'Windows' && 'C:\Program Files\LLVM\bin' || env.LIBCLANG_PATH }}
        with:
          command: build
          args: >-
            --release
            --out dist
            --features vendored
          manylinux: "2_28"
          # Produce both x86_64 and aarch64 wheels on Linux
          target: ${{ (runner.os == 'Linux') && matrix.target || '' }}
          sccache: true
          before-script-linux: |
            set -eux
            # Install clang/llvm + zlib headers INSIDE the manylinux container (no sudo there)
            if command -v dnf >/dev/null 2>&1; then
              dnf install -y clang llvm-devel zlib-devel
            elif command -v yum >/dev/null 2>&1; then
              yum install -y clang llvm-devel zlib-devel
            elif command -v apt-get >/dev/null 2>&1; then
              apt-get update && apt-get install -y clang llvm-dev zlib1g-dev
            fi

            # LIBCLANG_PATH autodetect
            if [ -f /usr/lib64/libclang.so ]; then
              export LIBCLANG_PATH=/usr/lib64
            elif [ -f /usr/lib/llvm/lib/libclang.so ]; then
              export LIBCLANG_PATH=/usr/lib/llvm/lib
            elif [ -f /usr/lib/x86_64-linux-gnu/libclang.so ]; then
              export LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu
            elif [ -f /usr/lib/aarch64-linux-gnu/libclang.so ]; then
              export LIBCLANG_PATH=/usr/lib/aarch64-linux-gnu
            fi
            echo "Using LIBCLANG_PATH=${LIBCLANG_PATH:-unset}"

      - name: Show wheels (Unix)
        if: runner.os != 'Windows'
        run: ls -lh dist

      - name: Show wheels (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: Get-ChildItem dist

      # Validate wheel integrity (avoid "ZIP archive not accepted: Trailing data")
      - name: Validate wheels (Integrity Check)
        shell: bash
        run: |
          python - <<'PY'
          import glob, zipfile, sys
          bad = False
          for whl in glob.glob("dist/*.whl"):
              ok = zipfile.is_zipfile(whl)
              print(f"{whl}: is_zipfile={ok}")
              if not ok:
                  bad = True
                  continue
              try:
                  with zipfile.ZipFile(whl) as zf:
                      err = zf.testzip()
                      print("  testzip:", err)
                      if err: bad = True
              except Exception as e:
                  print(f"  Error testing zip: {e}")
                  bad = True
          sys.exit(1 if bad else 0)
          PY

      - name: Verify import
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl
          python - <<'PY'
          import svy_io, svy_io.svyreadstat_rs as _m
          print("OK:", svy_io.__name__, getattr(svy_io, "__version__", "n/a"), _m.__name__)
          PY

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}${{ matrix.target && format('-{0}', matrix.target) || '' }}
          path: dist/*.whl

  sdist:
    name: Source dist
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          manylinux: "2_28"
      - name: Show sdist
        run: ls -lh dist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    name: Publish to PyPI
    needs: [build-wheels, sdist]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Validate wheels (publish)
        shell: bash
        run: |
          python - <<'PY'
          import glob, zipfile, sys
          bad = False
          for whl in glob.glob("dist/*.whl"):
              if not zipfile.is_zipfile(whl):
                  print("Bad wheel:", whl)
                  bad = True
          sys.exit(1 if bad else 0)
          PY

      - name: Upload (PyPI)
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing dist/*
