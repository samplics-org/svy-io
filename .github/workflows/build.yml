name: build
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build-wheels:
    name: Wheels (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Separate mac builds instead of --universal2
        os: [ubuntu-22.04, macos-13, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # Make sure we have a new-enough Python to satisfy abi3-py311 on Windows
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # ----- libclang for bindgen -----
      - name: Install LLVM (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install llvm

      - name: Export LLVM env (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH

      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: choco install -y llvm

      - name: Export LLVM env (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # bindgen looks for libclang.dll in this dir
          "LIBCLANG_PATH=C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Build wheels
      - name: Build wheels (maturin)
        uses: PyO3/maturin-action@v1
        # Remove PYO3_NO_PYTHON on Windows since it causes linking issues
        env:
          PYO3_NO_PYTHON: ${{ runner.os != 'Windows' && '1' || '' }}
        with:
          command: build
          args: >-
            --release
            --out dist
            --features vendored
          manylinux: "2_28"
          sccache: true
          # Install clang/llvm in the manylinux container WITHOUT sudo
          # (manylinux containers don't have sudo installed)
          before-script-linux: |
            set -eux
            # No sudo in manylinux containers - run commands directly
            if command -v dnf >/dev/null 2>&1; then
              dnf install -y clang llvm-devel
            elif command -v yum >/dev/null 2>&1; then
              yum install -y clang llvm-devel
            elif command -v apt-get >/dev/null 2>&1; then
              apt-get update && apt-get install -y clang llvm-dev
            fi

            # Find and set LIBCLANG_PATH
            if [ -f /usr/lib64/libclang.so ]; then
              export LIBCLANG_PATH=/usr/lib64
            elif [ -f /usr/lib/llvm/lib/libclang.so ]; then
              export LIBCLANG_PATH=/usr/lib/llvm/lib
            elif [ -f /usr/lib/x86_64-linux-gnu/libclang.so ]; then
              export LIBCLANG_PATH=/usr/lib/x86_64-linux-gnu
            fi
            echo "Using LIBCLANG_PATH=${LIBCLANG_PATH:-unset}"

      - name: Show wheels
        run: ls -lh dist

      - name: Verify import
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl
          python - <<'PY'
          import svy_io, svy_io.svyreadstat_rs as _m
          print("OK:", svy_io.__name__, getattr(svy_io, "__version__", "n/a"), _m.__name__)
          PY

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

  sdist:
    name: Source dist
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          manylinux: "2_28"
      - name: Show sdist
        run: ls -lh dist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    name: Publish to PyPI
    needs: [build-wheels, sdist]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist
      - name: Upload (PyPI)
        uses: PyO3/maturin-action@v1
        with:
          command: upload
          args: --skip-existing dist/*
